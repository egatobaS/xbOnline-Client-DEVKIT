#include "main.h"


//SHIELDDATA SHIELD;
//
//int(*XeKeysGetConsoleCertificate)(unsigned char* r3) = (int(*)(unsigned char* r3))0x80108618;
//int(*XeKeysGetKeys)(unsigned int Key, PVOID KeyBuffer, PDWORD keyLength) = (int(*)(unsigned int Key, PVOID KeyBuffer, PDWORD keyLength))0x80108550;
//
//
//DWORD XeKeysGetKey_Hook(unsigned int Key, PVOID KeyBuffer, PDWORD keyLength)
//{
//	char string[0x100];
//	sprintf(string, "XeKeysGetKeys: %X\n", Key);
//	SendOverNetWork(string);
//
//
//	if (Key == 0x36)
//	{
//		memcpy(KeyBuffer, SHIELD.XE_CONSOLE_CERTIFICATE, *keyLength);
//	}
//	else if (Key == 0x14)
//	{
//		memcpy(KeyBuffer, SHIELD.XE_CONSOLE_SERIAL, *keyLength);
//	}
//	else
//	{
//		return XeKeysGetKeys(Key, KeyBuffer, keyLength);
//	}
//	
//	return 0;
//}
//
//DWORD XeKeysGetConsoleCertificate_Hook(unsigned char *cert)
//{
//	SendOverNetWork("XeKeysGetConsoleCertificate_Hook Called!\n");
//	memcpy(cert, SHIELD.XE_CONSOLE_CERTIFICATE, 0x1A8);
//	return 0;
//}
//
//int XeKeysConsolePrivateKeySign_Hook(PBYTE Digest, PBYTE XE_CONSOLE_CERTIFICATE)
//{
//	SendOverNetWork("XeKeysPrivateSign Called!\n");
//	BYTE Format[0x80] = { 0 };
//	XeCryptBnDwLePkcs1Format(Digest, 0, Format, 0x80);
//	XeCryptBnQw_SwapDwQwLeBe((QWORD*)Format, (QWORD*)Format, 0x10);
//
//	int ret = XeCryptBnQwNeRsaPrvCrypt((QWORD*)Format, (QWORD*)Format, (XECRYPT_RSA*)(SHIELD.XE_PRIVATE_CERTIFICATE));
//
//	if (ret < 0)
//		return ret;
//
//	XeCryptBnQw_SwapDwQwLeBe((QWORD*)Format, (QWORD*)(XE_CONSOLE_CERTIFICATE + 0x1A8), 0x10);
//
//	return XeKeysGetConsoleCertificate(XE_CONSOLE_CERTIFICATE);
//}
//
//unsigned char rawData[544] = {
//	0xE3, 0x5B, 0xFB, 0x1C, 0xCD, 0xAD, 0x32, 0x5B, 0xF7, 0x0E, 0x07, 0xFD,
//	0x62, 0x3D, 0xA7, 0xC4, 0x8F, 0x29, 0x08, 0x38, 0x0B, 0x5B, 0xFE, 0x68,
//	0x7C, 0x26, 0x46, 0x2A, 0x51, 0xF2, 0xBC, 0x19, 0x12, 0x6A, 0xE7, 0xF3,
//	0x97, 0xFF, 0xD9, 0x83, 0xA0, 0x02, 0xCE, 0x0B, 0x90, 0x02, 0x5A, 0xB0,
//	0xCD, 0x60, 0x1A, 0x50, 0x9D, 0x45, 0x0E, 0xCE, 0x62, 0xEA, 0x27, 0xF6,
//	0xA3, 0xCE, 0xCB, 0x8B, 0xE0, 0x3E, 0x5F, 0x11, 0xEE, 0x72, 0xCE, 0x6E,
//	0x19, 0x48, 0xE7, 0x72, 0x9E, 0x4A, 0xB4, 0x16, 0x6F, 0xF9, 0x4C, 0x76,
//	0x75, 0x37, 0x5E, 0x65, 0x58, 0x75, 0xA5, 0x2B, 0x7E, 0x4D, 0x75, 0xB7,
//	0x5F, 0x36, 0x1B, 0x8E, 0x58, 0xA2, 0x0C, 0x04, 0x72, 0x78, 0xDE, 0xCD,
//	0x34, 0x5C, 0x7C, 0xE8, 0xA8, 0xD7, 0x34, 0x89, 0xE7, 0x72, 0x3D, 0x77,
//	0x5B, 0x19, 0xEF, 0x77, 0xEA, 0xA2, 0x5D, 0x71, 0x42, 0xAB, 0xD3, 0x28,
//	0x69, 0x0D, 0xFF, 0x87, 0x81, 0xE2, 0x80, 0xBF, 0x9C, 0x65, 0x32, 0x4D,
//	0xBE, 0x34, 0x57, 0xED, 0x28, 0xBC, 0x17, 0x09, 0x37, 0x85, 0xFE, 0x8E,
//	0x8B, 0x13, 0x84, 0x3D, 0x43, 0xB7, 0x84, 0x5B, 0x7A, 0xAD, 0xE4, 0x38,
//	0x06, 0x72, 0xCE, 0x68, 0xB1, 0xEA, 0x13, 0x98, 0x46, 0x7A, 0x53, 0xF5,
//	0x38, 0xC9, 0xC2, 0x2D, 0xCE, 0xD5, 0x7E, 0x12, 0x2F, 0x00, 0xC0, 0x7C,
//	0x87, 0x33, 0x3E, 0xE4, 0x84, 0x33, 0x8C, 0x4C, 0xC3, 0xDA, 0x4E, 0xCF,
//	0x09, 0xD5, 0x14, 0x8E, 0xEF, 0x43, 0xCE, 0xB0, 0x6B, 0x6E, 0x6C, 0x43,
//	0x42, 0x6C, 0xB4, 0x33, 0x06, 0x9E, 0x2F, 0x69, 0x6D, 0xCB, 0x45, 0xF3,
//	0x4E, 0x30, 0x4F, 0xD0, 0x4F, 0x26, 0x3A, 0xA4, 0x61, 0x89, 0x67, 0x84,
//	0xEB, 0x79, 0xAE, 0xCD, 0x72, 0xC8, 0x7B, 0x80, 0x83, 0xD5, 0x6F, 0xBB,
//	0xA1, 0x20, 0xB8, 0x1D, 0x93, 0xF8, 0x89, 0x48, 0x5B, 0x57, 0xE3, 0x02,
//	0x0A, 0x1A, 0xEF, 0xBF, 0x1C, 0xFF, 0x3B, 0xAF, 0xA0, 0x66, 0x49, 0x8D,
//	0x74, 0x04, 0xBE, 0xFB, 0x16, 0x39, 0xB6, 0x69, 0xD5, 0x27, 0xFF, 0x38,
//	0xC0, 0x37, 0x66, 0x2A, 0x9D, 0x79, 0x5C, 0xD7, 0x4C, 0x4E, 0x1E, 0x89,
//	0x98, 0x0F, 0xA5, 0x02, 0xDF, 0xEC, 0x48, 0x6E, 0xDD, 0x9D, 0x2B, 0x62,
//	0x35, 0x00, 0xF1, 0xAE, 0x71, 0x74, 0x82, 0x01, 0xB6, 0xAD, 0xFD, 0xB2,
//	0x15, 0xF4, 0x43, 0x2E, 0x53, 0xAC, 0x0B, 0x9D, 0xF3, 0x1B, 0x79, 0xBF,
//	0x08, 0x0C, 0xEE, 0xEA, 0xC3, 0x28, 0x9A, 0x17, 0x0B, 0x12, 0x03, 0x37,
//	0xC2, 0x5C, 0xE4, 0x44, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x21, 0xDA, 0x77,
//	0x50, 0x89, 0x71, 0x0F, 0xB2, 0x71, 0x9E, 0x41, 0x90, 0x08, 0x61, 0xD1,
//	0xC8, 0x28, 0x11, 0xE9, 0x23, 0x4B, 0x11, 0xC5, 0x36, 0x7B, 0x3F, 0x73,
//	0x50, 0x76, 0xD9, 0x06, 0xA6, 0xA5, 0x6E, 0xBE, 0x05, 0x5F, 0xF8, 0x42,
//	0xDA, 0x8E, 0x15, 0x5D, 0xF6, 0x48, 0x0F, 0x29, 0x3B, 0x99, 0xFF, 0x99,
//	0xCC, 0x7D, 0x90, 0xDA, 0xA4, 0xE7, 0xBF, 0xEF, 0xCE, 0x6C, 0x29, 0xCF,
//	0xC9, 0xE1, 0x32, 0x55, 0x27, 0x1D, 0x80, 0x19, 0xFC, 0xA9, 0xFE, 0xF7,
//	0x33, 0xCA, 0x56, 0xB8, 0x1F, 0x9A, 0xEE, 0x98, 0x4E, 0xFE, 0x38, 0x8E,
//	0x35, 0x0D, 0x9A, 0x85, 0x73, 0x1B, 0xCB, 0xAD, 0xC9, 0x86, 0x5C, 0x6A,
//	0x72, 0x49, 0xB1, 0x09, 0xC6, 0xC8, 0x2F, 0xE6, 0xD6, 0x3D, 0xC3, 0x75,
//	0x95, 0x04, 0x6B, 0x40, 0xA7, 0xF8, 0xF6, 0x63, 0xB5, 0x2C, 0xA9, 0x0D,
//	0x01, 0xAF, 0x7A, 0x25, 0x32, 0x6F, 0x1B, 0x5D, 0x9B, 0x99, 0x2F, 0x21,
//	0xDE, 0x99, 0x03, 0xDA, 0xCB, 0xCF, 0xFA, 0xC8, 0x1A, 0xDF, 0x97, 0xBF,
//	0x66, 0x3A, 0x59, 0xB7, 0x93, 0x7E, 0xBC, 0x46, 0x2C, 0x3C, 0x17, 0xA2,
//	0xA2, 0x7B, 0xB6, 0x2C, 0xBD, 0xDC, 0xA5, 0x73, 0xD4, 0xA6, 0x4C, 0x04,
//	0x35, 0x78, 0x00, 0xA2
//};
//unsigned char idk[64] = {
//	0x74, 0x4F, 0x83, 0x02, 0x7F, 0xBC, 0xC5, 0x1A, 0x52, 0x8A, 0x47, 0x4A,
//	0xFA, 0xD8, 0x30, 0x50, 0x03, 0xE8, 0x63, 0x02, 0xD7, 0x10, 0xED, 0x2A,
//	0x50, 0x0F, 0xDC, 0x2A, 0x56, 0x9D, 0x6E, 0x7A, 0x00, 0x00, 0x00, 0x00,
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//	0xB9, 0x90, 0xE6, 0x62, 0xF5, 0xE9, 0x02, 0x71, 0x0B, 0x84, 0xE3, 0x4B,
//	0xC1, 0x39, 0x39, 0xFF
//};
//bool CreateMobileFile(BYTE* rawKeyvault)
//{	
//	char* mobileFile = new char[0x378];
//	memcpy(mobileFile, rawKeyvault + 0x9C8, 0x1A8);
//	memcpy(mobileFile+0x1A8, rawKeyvault + 0x298, 0x1D0);
//	CWriteFile("GAME:\\MobileG.bin", mobileFile, 0x378);
//	return true;
//}
//bool InitKeyvaultForSheild(BYTE* rawKeyvault)
//{
//	MemoryBuffer keyfile;
//	if (!CReadFile("xbOnline:\\Key.bin", keyfile)) {
//		return E_FAIL;
//	}
//	
//
//	//XECRYPT_HMACSHA_STATE hmacSha;
//	////Console Certificate
//	//memcpy(SHIELD.XE_CONSOLE_CERTIFICATE, rawKeyvault + 0x9C8, 0x1A8);
//	//memcpy(SHIELD.XE_PRIVATE_CERTIFICATE, rawKeyvault + 0x298, 0x1D0);
//	////memcpy(SHIELD.XE_CONSOLE_SERIAL, rawKeyvault + 0xB0, 0xC);
//	////memcpy(SHIELD.DRIVE_OSIG, rawKeyvault + 0xC89, 0x25);
//	////memcpy(SHIELD.OddFeatures, rawKeyvault + 0x1C, 0xD4);
//	////memcpy(SHIELD.DVDKey, rawKeyvault + 0x100, 0x1CF8);
//	////memcpy(SHIELD.CardeaCertificate, rawKeyvault + 0x1EF8, 0x2108);
//	////memcpy(SHIELD.WIRELESS_CONTROLLER_KeyMS, rawKeyvault + 0x158, 0x20);
//	////memcpy(SHIELD.WIRELESS_CONTROLLER_Key3P, rawKeyvault + 0x1F8, 0x20);
//	////memcpy(SHIELD.WIRED_CONTROLLER_KeyMS, rawKeyvault + 0x198, 0x20);
//	////memcpy(SHIELD.WIRED_CONTROLLER_Key3P, rawKeyvault + 0x238, 0x20);
//	//
//	//
//	////CWriteFile("xbOnline:\\Key.bin", &SHIELD, sizeof(SHIELD));
//	//memcpy(&SHIELD, keyfile.GetData(), sizeof(SHIELD));
//	////HvPokeBytes(peekAddr + 0x138, rawData, 0x220);
//	//
//	////Get Hashes
//	//XeCryptHmacShaInit(&hmacSha, Spoofed_CPUKey, 0x10);
//	//XeCryptHmacShaUpdate(&hmacSha, SHIELD.OddFeatures, 0xD4);
//	//XeCryptHmacShaUpdate(&hmacSha, SHIELD.DVDKey, 0x1CF8);
//	//XeCryptHmacShaUpdate(&hmacSha, SHIELD.CardeaCertificate, 0x2108);
//	//XeCryptHmacShaFinal(&hmacSha, SHIELD.Keyvault_Digest, XECRYPT_SHA_DIGEST_SIZE);
//	//
//	////Finally Fix that Controller Jeeze.
//	//HvPeekBytes(peekAddr + 0xD0, idk, 0x40);
//	//HvPokeBytes(peekAddr + 0xF0, RetailKey, 0x10);
//	////HvPokeBytes(peekAddr + 0x158, SHIELD.WIRELESS_CONTROLLER_KeyMS, 0x20);
//	////HvPokeBytes(peekAddr + 0x1F8, SHIELD.WIRELESS_CONTROLLER_Key3P, 0x20);
//	////HvPokeBytes(peekAddr + 0x198, SHIELD.WIRED_CONTROLLER_KeyMS, 0x20);
//	////HvPokeBytes(peekAddr + 0x238, SHIELD.WIRED_CONTROLLER_Key3P, 0x20);
//	////HvPokeBytes(peekAddr + 0x138, rawData, 544);
//	//
//	////HvPokeBytes(peekAddr + 0x138, rawData, 0x20);
//	////HvPokeBytes(peekAddr + 0x1D8, rawData+0xA0, 0x20);
//	////HvPokeBytes(peekAddr + 0x278, rawData + 0x140, 0x20);
//	////HvPokeBytes(peekAddr + 0x158, SHIELD.WIRELESS_CONTROLLER_KeyMS, 0x20);
//	////HvPokeBytes(peekAddr + 0x1F8, SHIELD.WIRELESS_CONTROLLER_Key3P, 0x20);
//	////HvPokeBytes(peekAddr + 0x198, SHIELD.WIRED_CONTROLLER_KeyMS, 0x20);
//	////HvPokeBytes(peekAddr + 0x238, SHIELD.WIRED_CONTROLLER_Key3P, 0x20);
//	//
//	CreateMobileFile(rawKeyvault);
//	return 0;
//	//return InitializeKVShield();
//}
//
//bool InitializeKVShield()
//{
//	PatchInJump_2(0x81A711A4, (DWORD*)(XeKeysGetKey_Hook), false);
//	PatchInJump_2(0x80108618, (DWORD*)(XeKeysGetConsoleCertificate_Hook), false);
//	PatchInJump_2(0x80109208, (DWORD*)(XeKeysConsolePrivateKeySign_Hook), false);
//
//	//Because the console has already had certs, placed by the Hypervisor, these are outdated - time to update!
//	SetMemory((PVOID)0x8E03A000, SHIELD.XE_CONSOLE_CERTIFICATE, 0x1A8); ///KV.ConsoleCertificate
//	SetMemory((PVOID)0x8E038020, (SHIELD.XE_CONSOLE_CERTIFICATE + 0x2), 5); ///KV.ConsoleCertificate.ConsoleId.abData
//
//	//Create our updated hash, or the console will panic! ( Could server side this )
//	XeCryptSha((BYTE*)0x8E038014, 0x3EC, NULL, NULL, NULL, NULL, (BYTE*)0x8E038000, XECRYPT_SHA_DIGEST_SIZE);
//
//	//Lastly Reset the KERB Ticket Cache
//	XamCacheReset(XAM_CACHE_TICKETS);
//
//
//	return true;
//}